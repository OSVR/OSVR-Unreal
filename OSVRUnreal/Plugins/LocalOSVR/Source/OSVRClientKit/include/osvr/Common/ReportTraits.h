/** @file
    @brief Header containing simple traits definitions.

    While this file contains all of the main traits generated by macros, it is
   suggested that you include the specific header file for the trait you want to
   use, in case the structure changes and to make the include list more
   semantic.

    @date 2014

    @author
    Sensics, Inc.
    <http://sensics.com/osvr>
*/

// Copyright 2014 Sensics, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef INCLUDED_ReportTraits_h_GUID_CEDB196C_04E8_4085_EDCF_C5A1BD81A827
#define INCLUDED_ReportTraits_h_GUID_CEDB196C_04E8_4085_EDCF_C5A1BD81A827

// Internal Includes
#include <osvr/Util/ClientCallbackTypesC.h>
#include <osvr/TypePack/T.h>
#include <osvr/Util/ReportTypesX.h>

// Library/third-party includes
// - none

// Standard includes
// - none

namespace osvr {
namespace common {
    namespace traits {
        /// @brief Metafunction/trait taking a ReportType and returning the
        /// associated CallbackType
        /// @headerfile CallbackType.h <osvr/Common/CallbackType.h>
        template <typename T> struct CallbackType {};

        /// @brief Metafunction/trait taking a CallbackType and returning the
        /// associated ReportType
        /// @headerfile ReportFromCallback.h <osvr/Common/ReportFromCallback.h>
        template <typename T> struct ReportFromCallback {};

        /// @brief Metafunction/trait taking a ReportType and returning the
        /// associated StateType
        /// @headerfile StateType.h <osvr/Common/StateType.h>
        template <typename T> struct StateType {};

#define OSVR_X(TYPE)                                                           \
    template <> struct CallbackType<OSVR_##TYPE##Report> {                     \
        typedef OSVR_##TYPE##Callback type;                                    \
    };                                                                         \
    template <> struct ReportFromCallback<OSVR_##TYPE##Callback> {             \
        typedef OSVR_##TYPE##Report type;                                      \
    };                                                                         \
    template <> struct StateType<OSVR_##TYPE##Report> {                        \
        typedef OSVR_##TYPE##State type;                                       \
    };
        OSVR_INVOKE_REPORT_TYPES_XMACRO()
#undef OSVR_X

        /// @brief Alias for the CallbackType associated with a given ReportType
        /// @headerfile CallbackType.h <osvr/Common/CallbackType.h>
        template <typename T>
        using CallbackFromReport_t = typepack::t_<CallbackType<T>>;

        /// @brief Alias for the StateType associated with a given ReportType
        /// @headerfile CallbackType.h <osvr/Common/CallbackType.h>
        template <typename T>
        using StateFromReport_t = typepack::t_<StateType<T>>;

        /// @brief Alias for the ReportType associated with a given CallbackType
        /// @headerfile ReportFromCallback.h <osvr/Common/ReportFromCallback.h>
        template <typename T>
        using ReportFromCallback_t = typepack::t_<ReportFromCallback<T>>;
    } // namespace traits

} // namespace common
} // namespace osvr

#endif // INCLUDED_ReportTraits_h_GUID_CEDB196C_04E8_4085_EDCF_C5A1BD81A827
